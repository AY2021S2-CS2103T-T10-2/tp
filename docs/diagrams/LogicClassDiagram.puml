@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class PlannerParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

package Conditions {
Class ConditionLogic
Class ConstraintManager
Class RecurringScheduleVerifier
Class DateVerifier
Class IndexManager
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model {
Class HiddenModel #FFFFFF
}

package Storage {
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" PlannerParser
PlannerParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
note left of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc
LogicManager .left.> Command : executes >

XYZCommand ..> ConditionLogic
ConditionLogic --> DateVerifier
ConditionLogic --> IndexManager
ConditionLogic --> ConstraintManager
ConditionLogic --> RecurringScheduleVerifier

LogicManager -right-> Storage
LogicManager --> Model
Command .left.> Model

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult

PlannerParser -[hidden]->LogicManager
LogicManager -[hidden]->CommandResult
Logic -[hidden]->XYZCommandParser
@enduml
